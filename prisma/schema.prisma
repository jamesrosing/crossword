generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(uuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  progress       UserProgress[]
  rankingPoints  Int            @default(0)
  rank           String?
  createdPuzzles Puzzle[] // Add this line
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Puzzle {
  id          String         @id @default(uuid())
  title       String?
  difficulty  String?
  grid        String // JSON string representation of the grid
  words       String // JSON string representation of the words
  cellNumbers String // JSON string representation of cell numbers
  cluesAcross String // JSON string representation of across clues
  cluesDown   String // JSON string representation of down clues
  date        DateTime       @default(now())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  creatorId   String?
  creator     User?          @relation(fields: [creatorId], references: [id])
  progress    UserProgress[]
}

model UserProgress {
  id             String  @id @default(uuid())
  userId         String
  puzzleId       String
  progress       String // JSON string representation of progress
  completed      Boolean @default(false)
  completionTime Int?
  user           User    @relation(fields: [userId], references: [id])
  puzzle         Puzzle  @relation(fields: [puzzleId], references: [id])

  @@unique([userId, puzzleId])
}
