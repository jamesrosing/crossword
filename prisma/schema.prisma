generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  UserProgress  UserProgress[]
  Account       Account[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Puzzle {
  id           String         @id @default(cuid())
  title        String
  difficulty   String
  grid         String
  words        String
  cellNumbers  String
  cluesAcross  Json
  cluesDown    Json
  date         DateTime       @default(now())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UserProgress UserProgress[]
}

model UserProgress {
  id        String  @id @default(cuid())
  userId    String
  puzzleId  String
  progress  String
  completed Boolean
  user      User    @relation(fields: [userId], references: [id])
  puzzle    Puzzle  @relation(fields: [puzzleId], references: [id])
}
